//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""CasualMove"",
            ""id"": ""743616aa-ffc1-481a-a26a-104753d3cacf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""46d30b5b-6aef-49b3-af6a-49ee3ca0b5a2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""11b680f5-b829-4867-ba1f-38904387f167"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9d51a15d-7314-4a77-a7b9-63e7de675bfd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e37bd623-597b-4b74-a218-6e05674bedda"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49da6733-eecc-494d-994b-555bbe54ac89"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c89b9154-4c36-46e3-bf5c-4901f6ad9640"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TankMove"",
            ""id"": ""e71c3959-bd27-4d68-96c1-6f9623513e0f"",
            ""actions"": [
                {
                    ""name"": ""LeftTruck"",
                    ""type"": ""Value"",
                    ""id"": ""c3b3de1f-2be2-4260-ad53-69a206b3acaa"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTruck"",
                    ""type"": ""Value"",
                    ""id"": ""8d25b8a9-847a-45fe-bd84-991be038627b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AZ"",
                    ""id"": ""4f95e688-d47e-4c82-a6c1-82125569d4c4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTruck"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""44f30194-d050-4a24-b0f4-297ad4dd6a46"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""LeftTruck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6da9ccbd-14ff-4211-a043-17ada2a178af"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""LeftTruck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""SX"",
                    ""id"": ""c04e183d-da8d-4353-970f-fb15ecb8034e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTruck"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""94aac3e5-b1a0-43e2-8e10-4203a7593349"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""RightTruck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bf632543-1183-4363-9304-c5ffec2a5a39"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SimpleScheme"",
                    ""action"": ""RightTruck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Tower"",
            ""id"": ""016fdca5-ce7f-4832-b637-a79d2d1beb2d"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""cf2741f3-c6d8-4ae4-b9ce-5f7171d424a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44368418-3a11-4cfc-91c2-b58334d99350"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""SimpleScheme"",
            ""bindingGroup"": ""SimpleScheme"",
            ""devices"": []
        }
    ]
}");
        // CasualMove
        m_CasualMove = asset.FindActionMap("CasualMove", throwIfNotFound: true);
        m_CasualMove_Move = m_CasualMove.FindAction("Move", throwIfNotFound: true);
        // TankMove
        m_TankMove = asset.FindActionMap("TankMove", throwIfNotFound: true);
        m_TankMove_LeftTruck = m_TankMove.FindAction("LeftTruck", throwIfNotFound: true);
        m_TankMove_RightTruck = m_TankMove.FindAction("RightTruck", throwIfNotFound: true);
        // Tower
        m_Tower = asset.FindActionMap("Tower", throwIfNotFound: true);
        m_Tower_Shoot = m_Tower.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CasualMove
    private readonly InputActionMap m_CasualMove;
    private List<ICasualMoveActions> m_CasualMoveActionsCallbackInterfaces = new List<ICasualMoveActions>();
    private readonly InputAction m_CasualMove_Move;
    public struct CasualMoveActions
    {
        private @PlayerInputActions m_Wrapper;
        public CasualMoveActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CasualMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_CasualMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CasualMoveActions set) { return set.Get(); }
        public void AddCallbacks(ICasualMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_CasualMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CasualMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ICasualMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ICasualMoveActions instance)
        {
            if (m_Wrapper.m_CasualMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICasualMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_CasualMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CasualMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CasualMoveActions @CasualMove => new CasualMoveActions(this);

    // TankMove
    private readonly InputActionMap m_TankMove;
    private List<ITankMoveActions> m_TankMoveActionsCallbackInterfaces = new List<ITankMoveActions>();
    private readonly InputAction m_TankMove_LeftTruck;
    private readonly InputAction m_TankMove_RightTruck;
    public struct TankMoveActions
    {
        private @PlayerInputActions m_Wrapper;
        public TankMoveActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTruck => m_Wrapper.m_TankMove_LeftTruck;
        public InputAction @RightTruck => m_Wrapper.m_TankMove_RightTruck;
        public InputActionMap Get() { return m_Wrapper.m_TankMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankMoveActions set) { return set.Get(); }
        public void AddCallbacks(ITankMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_TankMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TankMoveActionsCallbackInterfaces.Add(instance);
            @LeftTruck.started += instance.OnLeftTruck;
            @LeftTruck.performed += instance.OnLeftTruck;
            @LeftTruck.canceled += instance.OnLeftTruck;
            @RightTruck.started += instance.OnRightTruck;
            @RightTruck.performed += instance.OnRightTruck;
            @RightTruck.canceled += instance.OnRightTruck;
        }

        private void UnregisterCallbacks(ITankMoveActions instance)
        {
            @LeftTruck.started -= instance.OnLeftTruck;
            @LeftTruck.performed -= instance.OnLeftTruck;
            @LeftTruck.canceled -= instance.OnLeftTruck;
            @RightTruck.started -= instance.OnRightTruck;
            @RightTruck.performed -= instance.OnRightTruck;
            @RightTruck.canceled -= instance.OnRightTruck;
        }

        public void RemoveCallbacks(ITankMoveActions instance)
        {
            if (m_Wrapper.m_TankMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITankMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_TankMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TankMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TankMoveActions @TankMove => new TankMoveActions(this);

    // Tower
    private readonly InputActionMap m_Tower;
    private List<ITowerActions> m_TowerActionsCallbackInterfaces = new List<ITowerActions>();
    private readonly InputAction m_Tower_Shoot;
    public struct TowerActions
    {
        private @PlayerInputActions m_Wrapper;
        public TowerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Tower_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Tower; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerActions set) { return set.Get(); }
        public void AddCallbacks(ITowerActions instance)
        {
            if (instance == null || m_Wrapper.m_TowerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TowerActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(ITowerActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(ITowerActions instance)
        {
            if (m_Wrapper.m_TowerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITowerActions instance)
        {
            foreach (var item in m_Wrapper.m_TowerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TowerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TowerActions @Tower => new TowerActions(this);
    private int m_SimpleSchemeSchemeIndex = -1;
    public InputControlScheme SimpleSchemeScheme
    {
        get
        {
            if (m_SimpleSchemeSchemeIndex == -1) m_SimpleSchemeSchemeIndex = asset.FindControlSchemeIndex("SimpleScheme");
            return asset.controlSchemes[m_SimpleSchemeSchemeIndex];
        }
    }
    public interface ICasualMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ITankMoveActions
    {
        void OnLeftTruck(InputAction.CallbackContext context);
        void OnRightTruck(InputAction.CallbackContext context);
    }
    public interface ITowerActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
}
